#pragma version 10
#pragma typetrack false

// smart_contracts.personal_bank.contract.PersonalBank.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "reward_asset" "totaldeposit" 0x676974 "withdraw_count"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/personal_bank/contract.py:13
    // self.totaldeposit = UInt64(0)
    bytec_2 // "totaldeposit"
    intc_1 // 0
    app_global_put
    // smart_contracts/personal_bank/contract.py:14
    // self.reward_asset = Asset(0)  # Initially no reward asset created
    bytec_1 // "reward_asset"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/personal_bank/contract.py:4
    // class PersonalBank(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x479679b7 0x9f597c32 0x31214176 0xb2ac2dee 0xc36836c3 0xa0f8fa9c 0x122238f2 0x6e4a8ad8 // method "create_reward_token(pay)void", method "deposit(string,pay)uint64", method "withdraw(uint64)uint64", method "withdraw_count()uint64", method "get_reward_asset_id()uint64", method "get_total_deposit()uint64", method "opt_in()string", method "opt_out()void"
    txna ApplicationArgs 0
    match main_create_reward_token_route@5 main_deposit_route@6 main_withdraw_route@7 main_withdraw_count_route@8 main_get_reward_asset_id_route@9 main_get_total_deposit_route@10 main_opt_in_route@11 main_opt_out_route@12

main_after_if_else@15:
    // smart_contracts/personal_bank/contract.py:4
    // class PersonalBank(ARC4Contract):
    intc_1 // 0
    return

main_opt_out_route@12:
    // smart_contracts/personal_bank/contract.py:115
    // @abimethod(allow_actions=['CloseOut'])
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_opt_in_route@11:
    // smart_contracts/personal_bank/contract.py:110
    // @abimethod(allow_actions=['OptIn'])
    txn OnCompletion
    intc_0 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_total_deposit_route@10:
    // smart_contracts/personal_bank/contract.py:105
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_total_deposit
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_reward_asset_id_route@9:
    // smart_contracts/personal_bank/contract.py:100
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_reward_asset_id
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_withdraw_count_route@8:
    // smart_contracts/personal_bank/contract.py:95
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdraw_count
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_withdraw_route@7:
    // smart_contracts/personal_bank/contract.py:72-73
    // # ... rest of the contract methods remain the same ...
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/personal_bank/contract.py:4
    // class PersonalBank(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/personal_bank/contract.py:72-73
    // # ... rest of the contract methods remain the same ...
    // @abimethod()
    callsub withdraw
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_deposit_route@6:
    // smart_contracts/personal_bank/contract.py:45
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/personal_bank/contract.py:4
    // class PersonalBank(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/personal_bank/contract.py:45
    // @abimethod()
    callsub deposit
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_create_reward_token_route@5:
    // smart_contracts/personal_bank/contract.py:20
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/personal_bank/contract.py:4
    // class PersonalBank(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/personal_bank/contract.py:20
    // @abimethod()
    callsub create_reward_token
    intc_0 // 1
    return

main_bare_routing@13:
    // smart_contracts/personal_bank/contract.py:4
    // class PersonalBank(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.personal_bank.contract.PersonalBank.create_reward_token(pay_txn: uint64) -> void:
create_reward_token:
    // smart_contracts/personal_bank/contract.py:20-21
    // @abimethod()
    // def create_reward_token(self, pay_txn: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/personal_bank/contract.py:23
    // pay_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/personal_bank/contract.py:22-24
    // assert (
    //     pay_txn.receiver == Global.current_application_address
    // ), "Receiver must be the contract address"
    assert // Receiver must be the contract address
    // smart_contracts/personal_bank/contract.py:25
    // assert pay_txn.amount == 1_000_000, "Deposit amount must be greater than zero"
    frame_dig -1
    gtxns Amount
    pushint 1000000 // 1000000
    ==
    assert // Deposit amount must be greater than zero
    // smart_contracts/personal_bank/contract.py:27
    // assert not self.reward_asset, "Reward token already created"
    intc_1 // 0
    bytec_1 // "reward_asset"
    app_global_get_ex
    assert // check self.reward_asset exists
    !
    assert // Reward token already created
    // smart_contracts/personal_bank/contract.py:28
    // assert Txn.sender == Global.creator_address, "Only the contract can create the reward token"
    txn Sender
    global CreatorAddress
    ==
    assert // Only the contract can create the reward token
    // smart_contracts/personal_bank/contract.py:29-40
    // # Create reward token with 100 total supply
    // asset_creation = itxn.AssetConfig(
    // total=100,
    // decimals=0,  # Non-divisible tokens (1 whole token per reward)
    // unit_name="BANKRWD",
    // asset_name="Bank Reward",
    // manager=Global.creator_address,
    // reserve=Global.creator_address,
    // freeze=Global.creator_address,
    // clawback=Global.creator_address,
    // fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/personal_bank/contract.py:35
    // manager=Global.creator_address,
    global CreatorAddress
    // smart_contracts/personal_bank/contract.py:36-38
    // reserve=Global.creator_address,
    // freeze=Global.creator_address,
    // clawback=Global.creator_address,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // smart_contracts/personal_bank/contract.py:34
    // asset_name="Bank Reward",
    pushbytes "Bank Reward"
    itxn_field ConfigAssetName
    // smart_contracts/personal_bank/contract.py:33
    // unit_name="BANKRWD",
    pushbytes "BANKRWD"
    itxn_field ConfigAssetUnitName
    // smart_contracts/personal_bank/contract.py:32
    // decimals=0,  # Non-divisible tokens (1 whole token per reward)
    intc_1 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/personal_bank/contract.py:31
    // total=100,
    pushint 100 // 100
    itxn_field ConfigAssetTotal
    // smart_contracts/personal_bank/contract.py:29-30
    // # Create reward token with 100 total supply
    // asset_creation = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    // smart_contracts/personal_bank/contract.py:39
    // fee=0
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/personal_bank/contract.py:29-40
    // # Create reward token with 100 total supply
    // asset_creation = itxn.AssetConfig(
    // total=100,
    // decimals=0,  # Non-divisible tokens (1 whole token per reward)
    // unit_name="BANKRWD",
    // asset_name="Bank Reward",
    // manager=Global.creator_address,
    // reserve=Global.creator_address,
    // freeze=Global.creator_address,
    // clawback=Global.creator_address,
    // fee=0
    // ).submit()
    itxn_submit
    // smart_contracts/personal_bank/contract.py:42
    // self.reward_asset = asset_creation.created_asset
    bytec_1 // "reward_asset"
    itxn CreatedAssetID
    app_global_put
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.deposit(user: bytes, pay_txn: uint64) -> uint64:
deposit:
    // smart_contracts/personal_bank/contract.py:45-46
    // @abimethod()
    // def deposit(self, user: String, pay_txn: gtxn.PaymentTransaction) -> UInt64:
    proto 2 1
    // smart_contracts/personal_bank/contract.py:49
    // pay_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/personal_bank/contract.py:48-50
    // assert (
    //     pay_txn.receiver == Global.current_application_address
    // ), "Receiver must be the contract address"
    assert // Receiver must be the contract address
    // smart_contracts/personal_bank/contract.py:51
    // assert pay_txn.amount > 0, "Deposit amount must be greater than zero"
    frame_dig -1
    gtxns Amount
    dup
    assert // Deposit amount must be greater than zero
    // smart_contracts/personal_bank/contract.py:53
    // deposit_amt, deposited = self.depositors.maybe(pay_txn.sender)
    frame_dig -1
    gtxns Sender
    dup
    box_get
    bury 1
    // smart_contracts/personal_bank/contract.py:55
    // if deposited:
    bz deposit_else_body@2
    // smart_contracts/personal_bank/contract.py:56
    // self.depositors[pay_txn.sender] += pay_txn.amount
    frame_dig 1
    dup
    box_get
    swap
    btoi
    swap
    assert // check self.depositors entry exists
    frame_dig 0
    +
    itob
    box_put

deposit_after_if_else@4:
    // smart_contracts/personal_bank/contract.py:67
    // self.github.value = user
    bytec_3 // 0x676974
    box_del
    pop
    bytec_3 // 0x676974
    frame_dig -2
    box_put
    // smart_contracts/personal_bank/contract.py:68
    // self.totaldeposit += pay_txn.amount
    intc_1 // 0
    bytec_2 // "totaldeposit"
    app_global_get_ex
    assert // check self.totaldeposit exists
    frame_dig 0
    +
    bytec_2 // "totaldeposit"
    swap
    app_global_put
    // smart_contracts/personal_bank/contract.py:70
    // return self.depositors[pay_txn.sender]
    frame_dig 1
    box_get
    swap
    btoi
    swap
    assert // check self.depositors entry exists
    frame_bury 0
    retsub

deposit_else_body@2:
    // smart_contracts/personal_bank/contract.py:58
    // self.depositors[pay_txn.sender] = pay_txn.amount
    frame_dig 0
    itob
    frame_dig 1
    dup
    uncover 2
    box_put
    // smart_contracts/personal_bank/contract.py:59-65
    // # Send reward token only to new depositors
    // itxn.AssetTransfer(
    //     asset_receiver=pay_txn.sender,
    //     xfer_asset=self.reward_asset,
    //     asset_amount=1,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/personal_bank/contract.py:62
    // xfer_asset=self.reward_asset,
    intc_1 // 0
    bytec_1 // "reward_asset"
    app_global_get_ex
    assert // check self.reward_asset exists
    // smart_contracts/personal_bank/contract.py:63
    // asset_amount=1,
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/personal_bank/contract.py:59-60
    // # Send reward token only to new depositors
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    // smart_contracts/personal_bank/contract.py:64
    // fee=0
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/personal_bank/contract.py:59-65
    // # Send reward token only to new depositors
    // itxn.AssetTransfer(
    //     asset_receiver=pay_txn.sender,
    //     xfer_asset=self.reward_asset,
    //     asset_amount=1,
    //     fee=0
    // ).submit()
    itxn_submit
    b deposit_after_if_else@4


// smart_contracts.personal_bank.contract.PersonalBank.withdraw(amountw: uint64) -> uint64:
withdraw:
    // smart_contracts/personal_bank/contract.py:72-74
    // # ... rest of the contract methods remain the same ...
    // @abimethod()
    // def withdraw(self, amountw: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/personal_bank/contract.py:76
    // deposit_amt, deposited = self.depositors.maybe(Txn.sender)
    txn Sender
    box_get
    swap
    btoi
    // smart_contracts/personal_bank/contract.py:77
    // assert deposited, "No deposits found for this account"
    swap
    assert // No deposits found for this account
    // smart_contracts/personal_bank/contract.py:78
    // assert amountw <= deposit_amt, "Withdrawal amount exceeds balance"
    frame_dig -1
    dig 1
    <=
    assert // Withdrawal amount exceeds balance
    // smart_contracts/personal_bank/contract.py:80-84
    // result = itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=amountw,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/personal_bank/contract.py:81
    // receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/personal_bank/contract.py:80
    // result = itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/personal_bank/contract.py:83
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/personal_bank/contract.py:80-84
    // result = itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=amountw,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/personal_bank/contract.py:86
    // self.depositors[Txn.sender] = deposit_amt - amountw
    txn Sender
    swap
    frame_dig -1
    -
    itob
    box_put
    // smart_contracts/personal_bank/contract.py:87
    // if self.depositors[Txn.sender] == UInt64(0):
    txn Sender
    box_get
    swap
    btoi
    swap
    assert // check self.depositors entry exists
    bnz withdraw_after_if_else@3
    // smart_contracts/personal_bank/contract.py:88
    // del self.depositors[Txn.sender]
    txn Sender
    box_del
    pop

withdraw_after_if_else@3:
    // smart_contracts/personal_bank/contract.py:89
    // self.totalwithdrawn[Txn.sender] = self.totalwithdrawn.get(Txn.sender, UInt64(0)) + UInt64(1)
    txn Sender
    intc_1 // 0
    bytec 4 // "withdraw_count"
    app_local_get_ex
    intc_1 // 0
    cover 2
    select
    txn Sender
    swap
    intc_0 // 1
    +
    bytec 4 // "withdraw_count"
    swap
    app_local_put
    // smart_contracts/personal_bank/contract.py:91
    // user = self.github.value
    bytec_3 // 0x676974
    box_get
    bury 1
    assert // check self.github exists
    // smart_contracts/personal_bank/contract.py:93
    // return self.depositors[Txn.sender]
    txn Sender
    box_get
    swap
    btoi
    swap
    assert // check self.depositors entry exists
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.withdraw_count() -> uint64:
withdraw_count:
    // smart_contracts/personal_bank/contract.py:98
    // return self.totalwithdrawn.get(Txn.sender, UInt64(0))
    txn Sender
    intc_1 // 0
    bytec 4 // "withdraw_count"
    app_local_get_ex
    intc_1 // 0
    cover 2
    select
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.get_reward_asset_id() -> uint64:
get_reward_asset_id:
    // smart_contracts/personal_bank/contract.py:103
    // return self.reward_asset.id
    intc_1 // 0
    bytec_1 // "reward_asset"
    app_global_get_ex
    assert // check self.reward_asset exists
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.get_total_deposit() -> uint64:
get_total_deposit:
    // smart_contracts/personal_bank/contract.py:108
    // return self.totaldeposit
    intc_1 // 0
    bytec_2 // "totaldeposit"
    app_global_get_ex
    assert // check self.totaldeposit exists
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.opt_in() -> bytes:
opt_in:
    // smart_contracts/personal_bank/contract.py:112
    // user = self.github.value
    bytec_3 // 0x676974
    box_get
    assert // check self.github exists
    // smart_contracts/personal_bank/contract.py:113
    // return user
    retsub
