{
    "name": "PersonalBank",
    "structs": {},
    "methods": [
        {
            "name": "create_reward_token",
            "args": [
                {
                    "type": "pay",
                    "name": "pay_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "string",
                    "name": "user"
                },
                {
                    "type": "pay",
                    "name": "pay_txn"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits funds into the personal bank and gives 1 reward token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amountw"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraws funds from the sender's account",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the number of times the sender has withdrawn funds",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_reward_asset_id",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the ID of the reward asset",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_deposit",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the total amount deposited in the personal bank",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_out",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "totaldeposit": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxkZXBvc2l0"
                },
                "reward_asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmV3YXJkX2Fzc2V0"
                }
            },
            "local": {
                "totalwithdrawn": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "d2l0aGRyYXdfY291bnQ="
                }
            },
            "box": {
                "github": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMString",
                    "key": "Z2l0"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "depositors": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        332,
                        420
                    ],
                    "errorMessage": "Deposit amount must be greater than zero"
                },
                {
                    "pc": [
                        513
                    ],
                    "errorMessage": "No deposits found for this account"
                },
                {
                    "pc": [
                        143
                    ],
                    "errorMessage": "OnCompletion is not CloseOut"
                },
                {
                    "pc": [
                        177,
                        194,
                        211,
                        228,
                        249,
                        282
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        344
                    ],
                    "errorMessage": "Only the contract can create the reward token"
                },
                {
                    "pc": [
                        322,
                        414
                    ],
                    "errorMessage": "Receiver must be the contract address"
                },
                {
                    "pc": [
                        338
                    ],
                    "errorMessage": "Reward token already created"
                },
                {
                    "pc": [
                        519
                    ],
                    "errorMessage": "Withdrawal amount exceeds balance"
                },
                {
                    "pc": [
                        309
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        146,
                        156,
                        180,
                        197,
                        214,
                        231,
                        252,
                        285
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        439,
                        468,
                        550,
                        588
                    ],
                    "errorMessage": "check self.depositors entry exists"
                },
                {
                    "pc": [
                        581,
                        613
                    ],
                    "errorMessage": "check self.github exists"
                },
                {
                    "pc": [
                        336,
                        485,
                        604
                    ],
                    "errorMessage": "check self.reward_asset exists"
                },
                {
                    "pc": [
                        455,
                        609
                    ],
                    "errorMessage": "check self.totaldeposit exists"
                },
                {
                    "pc": [
                        268,
                        295
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmBQQVH3x1DHJld2FyZF9hc3NldAx0b3RhbGRlcG9zaXQDZ2l0DndpdGhkcmF3X2NvdW50MRhAAAYqI2cpI2cxG0EA5IIIBEeWebcEn1l8MgQxIUF2BLKsLe4Ew2g2wwSg+PqcBBIiOPIEbkqK2DYaAI4IAI8AbgBZAEgANwAmAA0AAiNDMRmBAhJEMRhEIkMxGSISRDEYRIgBw0kVFlcGAkxQKExQsCJDMRkURDEYRIgBphYoTFCwIkMxGRREMRhEiAGQFihMULAiQzEZFEQxGESIAXQWKExQsCJDMRkURDEYRDYaAReIAQkWKExQsCJDMRkURDEYRDYaAVcCADEWIglJOBAiEkSIAIQWKExQsCJDMRkURDEYRDEWIglJOBAiEkSIAA0iQzEZQP9WMRgURCJDigEAi/84BzIKEkSL/zgIgcCEPRJEIyllRBREMQAyCRJEsTIJRwOyLLIrsiqyKYALQmFuayBSZXdhcmSyJoAHQkFOS1JXRLIlI7IjgWSyIoEDshAjsgGzKbQ8Z4mKAgGL/zgHMgoSRIv/OAhJRIv/OABJvkUBQQAoiwFJvkwXTESLAAgWvyu8SCuL/r8jKmVEiwAIKkxniwG+TBdMRIwAiYsAFosBSU8Cv7EjKWVEIrISshGyFIEEshAjsgGzQv/FigEBMQC+TBdMRIv/SwEORLExAIv/sgiyByKyECOyAbMxAEyL/wkWvzEAvkwXTERAAAQxALxIMQAjJwRjI04CTTEATCIIJwRMZiu+RQFEMQC+TBdMRIkxACMnBGMjTgJNiSMpZUSJIyplRIkrvkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}