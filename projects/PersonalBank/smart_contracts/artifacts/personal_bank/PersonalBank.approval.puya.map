{
  "version": 3,
  "sources": [
    "../../personal_bank/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYQ;AAAoB;AAApB;AACA;AAAoB;AAApB;AAVR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AA+GK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AArEL;;;AAAA;AAqEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBK;;;AAAA;;AAhBL;;AAAA;;;;;;;;;AAgBA;;;AAGY;;AAAA;;AAAoB;;AAApB;AADJ;AAGO;;AAAA;;AAAkB;;;;AAAlB;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAP;AACO;;AAAc;;AAAd;AAAP;AAEiB;AAKT;;AACA;;;;;;;;;;AAFG;;;;;;;;;;;;;;;AADD;;;;;;;;;;;AADD;;;AADH;;;;AADW;;;;AASb;;;AATa;AAYjB;;;AAAA;;AAGR;;;AAIY;;AAAA;;AAAoB;;AAApB;AADJ;AAGO;;AAAA;;AAAA;AAAP;AAE+C;;AAAA;;AAAA;AAAtB;AAAA;;AAEjC;;;AACY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWJ;AAAA;;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;AAZI;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAEA;AAEe;AAAA;AAAA;AAAA;AACE;;;;;;;AAHjB;;;;AAIQ;;;AAJR;;;;AAaZ;;;AAGuD;;AAAtB;AAAA;AAAA;AACzB;AAAA;AACO;;AAAA;;AAAA;AAAP;AAES;AACI;;;;;;;;AADJ;;;AAGD;;;AAHC;AAMO;;AAAc;AAAA;;AAAA;AAA9B;AAAA;AACmB;;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAX;;;AACgC;;AAApB;;AACsD;;AAAxB;AAAA;;AAAA;AAAoC;AAApC;;AAAA;AAAd;;AAAc;AAAiD;AAAjD;AAAlC;;AAAA;AAAA;AAEO;AAAA;AAAA;;AAAA;AAEgB;;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAP;AAK+B;;AAAxB;AAAA;;AAAA;AAAoC;AAApC;;AAAA;AAAP;AAKO;AAAA;AAAA;AAAA;AAAP;AAKO;AAAA;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AACP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"reward_asset\" \"totaldeposit\" 0x676974 \"withdraw_count\""
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "59": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "62": {
      "op": "bytec_2 // \"totaldeposit\"",
      "defined_out": [
        "\"totaldeposit\""
      ],
      "stack_out": [
        "\"totaldeposit\""
      ]
    },
    "63": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"totaldeposit\"",
        "0"
      ],
      "stack_out": [
        "\"totaldeposit\"",
        "0"
      ]
    },
    "64": {
      "op": "app_global_put",
      "stack_out": []
    },
    "65": {
      "op": "bytec_1 // \"reward_asset\"",
      "defined_out": [
        "\"reward_asset\""
      ],
      "stack_out": [
        "\"reward_asset\""
      ]
    },
    "66": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"reward_asset\"",
        "0"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "70": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "73": {
      "op": "pushbytess 0x479679b7 0x9f597c32 0x31214176 0xb2ac2dee 0xc36836c3 0xa0f8fa9c 0x122238f2 0x6e4a8ad8 // method \"create_reward_token(pay)void\", method \"deposit(string,pay)uint64\", method \"withdraw(uint64)uint64\", method \"withdraw_count()uint64\", method \"get_reward_asset_id()uint64\", method \"get_total_deposit()uint64\", method \"opt_in()string\", method \"opt_out()void\"",
      "defined_out": [
        "Method(create_reward_token(pay)void)",
        "Method(deposit(string,pay)uint64)",
        "Method(get_reward_asset_id()uint64)",
        "Method(get_total_deposit()uint64)",
        "Method(opt_in()string)",
        "Method(opt_out()void)",
        "Method(withdraw(uint64)uint64)",
        "Method(withdraw_count()uint64)"
      ],
      "stack_out": [
        "Method(create_reward_token(pay)void)",
        "Method(deposit(string,pay)uint64)",
        "Method(withdraw(uint64)uint64)",
        "Method(withdraw_count()uint64)",
        "Method(get_reward_asset_id()uint64)",
        "Method(get_total_deposit()uint64)",
        "Method(opt_in()string)",
        "Method(opt_out()void)"
      ]
    },
    "115": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_reward_token(pay)void)",
        "Method(deposit(string,pay)uint64)",
        "Method(get_reward_asset_id()uint64)",
        "Method(get_total_deposit()uint64)",
        "Method(opt_in()string)",
        "Method(opt_out()void)",
        "Method(withdraw(uint64)uint64)",
        "Method(withdraw_count()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_reward_token(pay)void)",
        "Method(deposit(string,pay)uint64)",
        "Method(withdraw(uint64)uint64)",
        "Method(withdraw_count()uint64)",
        "Method(get_reward_asset_id()uint64)",
        "Method(get_total_deposit()uint64)",
        "Method(opt_in()string)",
        "Method(opt_out()void)",
        "tmp%2#0"
      ]
    },
    "118": {
      "op": "match main_create_reward_token_route@5 main_deposit_route@6 main_withdraw_route@7 main_withdraw_count_route@8 main_get_reward_asset_id_route@9 main_get_total_deposit_route@10 main_opt_in_route@11 main_opt_out_route@12",
      "stack_out": []
    },
    "136": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "return",
      "stack_out": []
    },
    "138": {
      "block": "main_opt_out_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "140": {
      "op": "pushint 2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "CloseOut"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "block": "main_opt_in_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "151": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "OptIn"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "156": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "157": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.opt_in",
      "op": "callsub opt_in",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "160": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "161": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%0#0"
      ]
    },
    "162": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%0#0"
      ]
    },
    "163": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%0#0"
      ]
    },
    "166": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%5#0"
      ]
    },
    "167": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "168": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "169": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "170": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "171": {
      "op": "log",
      "stack_out": []
    },
    "172": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "return",
      "stack_out": []
    },
    "174": {
      "block": "main_get_total_deposit_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "176": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "177": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "178": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "181": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.get_total_deposit",
      "op": "callsub get_total_deposit",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "184": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "185": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "188": {
      "op": "log",
      "stack_out": []
    },
    "189": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "block": "main_get_reward_asset_id_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "193": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "194": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "195": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "197": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "198": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.get_reward_asset_id",
      "op": "callsub get_reward_asset_id",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "201": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "202": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "205": {
      "op": "log",
      "stack_out": []
    },
    "206": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "block": "main_withdraw_count_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "214": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "215": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.withdraw_count",
      "op": "callsub withdraw_count",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "218": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "219": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_withdraw_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "235": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "236": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.withdraw",
      "op": "callsub withdraw",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "239": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "240": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "243": {
      "op": "log",
      "stack_out": []
    },
    "244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "return",
      "stack_out": []
    },
    "246": {
      "block": "main_deposit_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "253": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "256": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "259": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "261": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "1"
      ]
    },
    "262": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "gtxn_idx%1#0"
      ]
    },
    "263": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "264": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "266": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "267": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "268": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%13#0",
        "gtxn_idx%1#0"
      ]
    },
    "269": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.deposit",
      "op": "callsub deposit",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "272": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "273": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "274": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "276": {
      "op": "log",
      "stack_out": []
    },
    "277": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "block": "main_create_reward_token_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "282": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "283": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "285": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "286": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "288": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "289": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "291": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "293": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "294": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "295": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "296": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.create_reward_token",
      "op": "callsub create_reward_token",
      "stack_out": []
    },
    "299": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "300": {
      "op": "return",
      "stack_out": []
    },
    "301": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "303": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "306": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "308": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "309": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.create_reward_token",
      "params": {
        "pay_txn#0": "uint64"
      },
      "block": "create_reward_token",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "315": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay_txn#0 (copy)"
      ],
      "stack_out": [
        "pay_txn#0 (copy)"
      ]
    },
    "317": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "319": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "321": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "322": {
      "error": "Receiver must be the contract address",
      "op": "assert // Receiver must be the contract address",
      "stack_out": []
    },
    "323": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay_txn#0 (copy)"
      ]
    },
    "325": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "327": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1000000"
      ]
    },
    "331": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "332": {
      "error": "Deposit amount must be greater than zero",
      "op": "assert // Deposit amount must be greater than zero",
      "stack_out": []
    },
    "333": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "334": {
      "op": "bytec_1 // \"reward_asset\"",
      "defined_out": [
        "\"reward_asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reward_asset\""
      ]
    },
    "335": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "336": {
      "error": "check self.reward_asset exists",
      "op": "assert // check self.reward_asset exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "337": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "338": {
      "error": "Reward token already created",
      "op": "assert // Reward token already created",
      "stack_out": []
    },
    "339": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "341": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "343": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "344": {
      "error": "Only the contract can create the reward token",
      "op": "assert // Only the contract can create the reward token",
      "stack_out": []
    },
    "345": {
      "op": "itxn_begin"
    },
    "346": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "348": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "350": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "352": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "354": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "356": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "358": {
      "op": "pushbytes \"Bank Reward\"",
      "defined_out": [
        "\"Bank Reward\""
      ],
      "stack_out": [
        "\"Bank Reward\""
      ]
    },
    "371": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "373": {
      "op": "pushbytes \"BANKRWD\"",
      "defined_out": [
        "\"BANKRWD\""
      ],
      "stack_out": [
        "\"BANKRWD\""
      ]
    },
    "382": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "384": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "385": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "387": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100"
      ],
      "stack_out": [
        "100"
      ]
    },
    "389": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "391": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "393": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "395": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "396": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "398": {
      "op": "itxn_submit"
    },
    "399": {
      "op": "bytec_1 // \"reward_asset\"",
      "stack_out": [
        "\"reward_asset\""
      ]
    },
    "400": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"reward_asset\"",
        "asset_creation.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"reward_asset\"",
        "asset_creation.CreatedAssetID#0"
      ]
    },
    "402": {
      "op": "app_global_put",
      "stack_out": []
    },
    "403": {
      "retsub": true,
      "op": "retsub"
    },
    "404": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.deposit",
      "params": {
        "user#0": "bytes",
        "pay_txn#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "407": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay_txn#0 (copy)"
      ],
      "stack_out": [
        "pay_txn#0 (copy)"
      ]
    },
    "409": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "411": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "413": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "414": {
      "error": "Receiver must be the contract address",
      "op": "assert // Receiver must be the contract address",
      "stack_out": []
    },
    "415": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay_txn#0 (copy)"
      ]
    },
    "417": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "419": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "420": {
      "error": "Deposit amount must be greater than zero",
      "op": "assert // Deposit amount must be greater than zero",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "421": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "pay_txn#0 (copy)"
      ]
    },
    "423": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "425": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "426": {
      "op": "box_get",
      "defined_out": [
        "deposited#0",
        "maybe_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "deposited#0"
      ]
    },
    "427": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "deposited#0"
      ]
    },
    "429": {
      "op": "bz deposit_else_body@2",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "432": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "434": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "435": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "436": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "437": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "438": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "439": {
      "error": "check self.depositors entry exists",
      "op": "assert // check self.depositors entry exists",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value_converted%1#0"
      ]
    },
    "440": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value_converted%1#0",
        "tmp%3#0"
      ]
    },
    "442": {
      "op": "+",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "new_box_value%0#0"
      ]
    },
    "443": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "new_box_value%1#0"
      ]
    },
    "444": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "445": {
      "block": "deposit_after_if_else@4",
      "stack_in": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "op": "bytec_3 // 0x676974",
      "defined_out": [
        "0x676974"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0x676974"
      ]
    },
    "446": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "447": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "448": {
      "op": "bytec_3 // 0x676974",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0x676974"
      ]
    },
    "449": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x676974",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0x676974",
        "user#0 (copy)"
      ]
    },
    "451": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "452": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0"
      ]
    },
    "453": {
      "op": "bytec_2 // \"totaldeposit\"",
      "defined_out": [
        "\"totaldeposit\"",
        "0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0",
        "\"totaldeposit\""
      ]
    },
    "454": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "455": {
      "error": "check self.totaldeposit exists",
      "op": "assert // check self.totaldeposit exists",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "456": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "tmp%3#0"
      ]
    },
    "458": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "new_state_value%0#0"
      ]
    },
    "459": {
      "op": "bytec_2 // \"totaldeposit\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "new_state_value%0#0",
        "\"totaldeposit\""
      ]
    },
    "460": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "\"totaldeposit\"",
        "new_state_value%0#0"
      ]
    },
    "461": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "462": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "464": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "465": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "466": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value_converted%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_exists%4#0",
        "maybe_value_converted%2#0"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value_converted%2#0",
        "maybe_exists%4#0"
      ]
    },
    "468": {
      "error": "check self.depositors entry exists",
      "op": "assert // check self.depositors entry exists",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value_converted%2#0"
      ]
    },
    "469": {
      "op": "frame_bury 0"
    },
    "471": {
      "retsub": true,
      "op": "retsub"
    },
    "472": {
      "block": "deposit_else_body@2",
      "stack_in": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "474": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "new_box_value%3#0"
      ]
    },
    "475": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "new_box_value%3#0",
        "tmp%5#0"
      ]
    },
    "477": {
      "op": "dup"
    },
    "478": {
      "op": "uncover 2",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "new_box_value%3#0"
      ]
    },
    "480": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "481": {
      "op": "itxn_begin"
    },
    "482": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "0"
      ]
    },
    "483": {
      "op": "bytec_1 // \"reward_asset\"",
      "defined_out": [
        "\"reward_asset\"",
        "0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "0",
        "\"reward_asset\""
      ]
    },
    "484": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "485": {
      "error": "check self.reward_asset exists",
      "op": "assert // check self.reward_asset exists",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "486": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "487": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "489": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "491": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "493": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "axfer"
      ]
    },
    "495": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "497": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0"
      ]
    },
    "498": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "500": {
      "op": "itxn_submit"
    },
    "501": {
      "op": "b deposit_after_if_else@4"
    },
    "504": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.withdraw",
      "params": {
        "amountw#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "507": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "box_get",
      "defined_out": [
        "deposited#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "deposited#0"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "deposited#0",
        "maybe_value%0#0"
      ]
    },
    "511": {
      "op": "btoi",
      "defined_out": [
        "deposit_amt#0",
        "deposited#0"
      ],
      "stack_out": [
        "deposited#0",
        "deposit_amt#0"
      ]
    },
    "512": {
      "op": "swap",
      "stack_out": [
        "deposit_amt#0",
        "deposited#0"
      ]
    },
    "513": {
      "error": "No deposits found for this account",
      "op": "assert // No deposits found for this account",
      "stack_out": [
        "deposit_amt#0"
      ]
    },
    "514": {
      "op": "frame_dig -1",
      "defined_out": [
        "amountw#0 (copy)",
        "deposit_amt#0"
      ],
      "stack_out": [
        "deposit_amt#0",
        "amountw#0 (copy)"
      ]
    },
    "516": {
      "op": "dig 1",
      "defined_out": [
        "amountw#0 (copy)",
        "deposit_amt#0",
        "deposit_amt#0 (copy)"
      ],
      "stack_out": [
        "deposit_amt#0",
        "amountw#0 (copy)",
        "deposit_amt#0 (copy)"
      ]
    },
    "518": {
      "op": "<=",
      "defined_out": [
        "deposit_amt#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "deposit_amt#0",
        "tmp%2#0"
      ]
    },
    "519": {
      "error": "Withdrawal amount exceeds balance",
      "op": "assert // Withdrawal amount exceeds balance",
      "stack_out": [
        "deposit_amt#0"
      ]
    },
    "520": {
      "op": "itxn_begin"
    },
    "521": {
      "op": "txn Sender",
      "defined_out": [
        "deposit_amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "deposit_amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "523": {
      "op": "frame_dig -1",
      "stack_out": [
        "deposit_amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "amountw#0 (copy)"
      ]
    },
    "525": {
      "op": "itxn_field Amount",
      "stack_out": [
        "deposit_amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "527": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "deposit_amt#0"
      ]
    },
    "529": {
      "op": "intc_0 // pay",
      "defined_out": [
        "deposit_amt#0",
        "pay"
      ],
      "stack_out": [
        "deposit_amt#0",
        "pay"
      ]
    },
    "530": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "deposit_amt#0"
      ]
    },
    "532": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "deposit_amt#0"
      ],
      "stack_out": [
        "deposit_amt#0",
        "0"
      ]
    },
    "533": {
      "op": "itxn_field Fee",
      "stack_out": [
        "deposit_amt#0"
      ]
    },
    "535": {
      "op": "itxn_submit"
    },
    "536": {
      "op": "txn Sender",
      "defined_out": [
        "deposit_amt#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "deposit_amt#0",
        "tmp%3#0"
      ]
    },
    "538": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "deposit_amt#0"
      ]
    },
    "539": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "deposit_amt#0",
        "amountw#0 (copy)"
      ]
    },
    "541": {
      "op": "-",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "542": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%1#0"
      ]
    },
    "543": {
      "op": "box_put",
      "stack_out": []
    },
    "544": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "546": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "548": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "549": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "550": {
      "error": "check self.depositors entry exists",
      "op": "assert // check self.depositors entry exists",
      "stack_out": [
        "maybe_value_converted%1#0"
      ]
    },
    "551": {
      "op": "bnz withdraw_after_if_else@3",
      "stack_out": []
    },
    "554": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "556": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "557": {
      "op": "pop",
      "stack_out": []
    },
    "558": {
      "block": "withdraw_after_if_else@3",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "560": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "561": {
      "op": "bytec 4 // \"withdraw_count\"",
      "defined_out": [
        "\"withdraw_count\"",
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0",
        "\"withdraw_count\""
      ]
    },
    "563": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "564": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0"
      ]
    },
    "565": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "567": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "568": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%11#0"
      ]
    },
    "570": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "state_get%0#0"
      ]
    },
    "571": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "state_get%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "state_get%0#0",
        "1"
      ]
    },
    "572": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_state_value%0#0"
      ]
    },
    "573": {
      "op": "bytec 4 // \"withdraw_count\""
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "\"withdraw_count\"",
        "new_state_value%0#0"
      ]
    },
    "576": {
      "op": "app_local_put",
      "stack_out": []
    },
    "577": {
      "op": "bytec_3 // 0x676974",
      "defined_out": [
        "0x676974"
      ],
      "stack_out": [
        "0x676974"
      ]
    },
    "578": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_exists%3#0"
      ]
    },
    "579": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "581": {
      "error": "check self.github exists",
      "op": "assert // check self.github exists",
      "stack_out": []
    },
    "582": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "584": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "585": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "586": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "maybe_exists%4#0",
        "maybe_value_converted%2#0"
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%2#0",
        "maybe_exists%4#0"
      ]
    },
    "588": {
      "error": "check self.depositors entry exists",
      "op": "assert // check self.depositors entry exists",
      "stack_out": [
        "maybe_value_converted%2#0"
      ]
    },
    "589": {
      "retsub": true,
      "op": "retsub"
    },
    "590": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.withdraw_count",
      "params": {},
      "block": "withdraw_count",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "592": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "593": {
      "op": "bytec 4 // \"withdraw_count\"",
      "defined_out": [
        "\"withdraw_count\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"withdraw_count\""
      ]
    },
    "595": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "596": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "597": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "599": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "600": {
      "retsub": true,
      "op": "retsub"
    },
    "601": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.get_reward_asset_id",
      "params": {},
      "block": "get_reward_asset_id",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "602": {
      "op": "bytec_1 // \"reward_asset\"",
      "defined_out": [
        "\"reward_asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reward_asset\""
      ]
    },
    "603": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "604": {
      "error": "check self.reward_asset exists",
      "op": "assert // check self.reward_asset exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "605": {
      "retsub": true,
      "op": "retsub"
    },
    "606": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.get_total_deposit",
      "params": {},
      "block": "get_total_deposit",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "607": {
      "op": "bytec_2 // \"totaldeposit\"",
      "defined_out": [
        "\"totaldeposit\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totaldeposit\""
      ]
    },
    "608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "609": {
      "error": "check self.totaldeposit exists",
      "op": "assert // check self.totaldeposit exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "610": {
      "retsub": true,
      "op": "retsub"
    },
    "611": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.opt_in",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "bytec_3 // 0x676974",
      "defined_out": [
        "0x676974"
      ],
      "stack_out": [
        "0x676974"
      ]
    },
    "612": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_exists%0#0"
      ]
    },
    "613": {
      "error": "check self.github exists",
      "op": "assert // check self.github exists",
      "stack_out": [
        "user#0"
      ]
    },
    "614": {
      "retsub": true,
      "op": "retsub"
    }
  }
}